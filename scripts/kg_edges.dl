#define RDF_TYPE "<http://www.w3.org/1999/02/22-rdf-syntax-ns#type>"
#define RDFS_SUBPROPERTY_OF "<http://www.w3.org/2000/01/rdf-schema#subPropertyOf>"
#define SESAME_DIRECT_TYPE "<http://www.openrdf.org/schema/sesame#directType>"
#define SKOS_EXACT_MATCH "<http://www.w3.org/2004/02/skos/core#exactMatch>"
#define SKOS_NARROW_MATCH "<http://www.w3.org/2004/02/skos/core#narrowMatch>"
#define SKOS_BROAD_MATCH "<http://www.w3.org/2004/02/skos/core#broadMatch>"
#define PROV_WAS_DERIVED_FROM "<http://www.w3.org/ns/prov#wasDerivedFrom>"
#define MOLECULAR_FUNCTION "<http://purl.obolibrary.org/obo/GO_0003674>"
#define BIOLOGICAL_PROCESS "<http://purl.obolibrary.org/obo/GO_0008150>"
#define CELLULAR_COMPONENT "<http://purl.obolibrary.org/obo/GO_0005575>"
#define HUMAN "<http://purl.obolibrary.org/obo/NCBITaxon_9606>"
#define MOUSE "<http://purl.obolibrary.org/obo/NCBITaxon_10090>"
#define RAT "<http://purl.obolibrary.org/obo/NCBITaxon_10116>"
#define ZEBRAFISH "<http://purl.obolibrary.org/obo/NCBITaxon_7955>"
#define CANONICAL_RECORD "<http://geneontology.org/lego/canonical_record>"
#define MOLECULAR_EVENT "<http://purl.obolibrary.org/obo/go/extensions/reacto.owl#molecular_event>"

.input asserted(IO=file, filename="quad.facts")
.input inferred(IO=file, filename="inferred.csv")
.input biolink(IO=file, filename="biolink.facts")
.input local_mapping(IO=file, filename="ro-to-biolink-local-mappings.tsv")
.input ontology(IO=file, filename="ontology.facts")
.output kg_edge

.decl asserted(s: symbol, p: symbol, o: symbol, g: symbol) //brie
.decl inferred(s: symbol, p: symbol, o: symbol, g: symbol) //brie
.decl quad(s: symbol, p: symbol, o: symbol, g: symbol) //brie
.decl biolink_quad(s: symbol, pred: symbol, o: symbol, g: symbol) //brie
.decl redundant_quad(s: symbol, pred: symbol, o: symbol, g: symbol) //brie
.decl nonredundant_quad(s: symbol, pred: symbol, o: symbol, g: symbol) //brie
.decl ontology(s: symbol, p: symbol, o: symbol)
.decl canonical_record(reacto: symbol, uniprot: symbol)
.decl graph(g: symbol)
.decl biolink(s: symbol, p: symbol, o: symbol)
.decl mapped_to(term: symbol, other: symbol)
.decl local_mapping(ro: symbol, biolink: symbol, scope: symbol)
.decl subprop(sub: symbol, super: symbol)
.decl primary_source(graph: symbol, source: symbol)
.decl direct_type(ind: symbol, type: symbol)
.decl kg_edge(s: symbol, p: symbol, o: symbol, prov: symbol, primary_source: symbol, qualifier_id: symbol, qualifier_value: symbol)

canonical_record(reacto, uniprot) :- ontology(reacto, CANONICAL_RECORD, uniprot).

quad(s, p, o, g) :- asserted(s, p, o, g).
quad(s, p, o, g) :- inferred(s, p, o, inf), inferred(inf, PROV_WAS_DERIVED_FROM, g, inf).

//mapped_to(t, o) :- biolink(t, SKOS_EXACT_MATCH, o).
//mapped_to(t, o) :- biolink(t, SKOS_NARROW_MATCH, o).
//mapped_to(t, o) :- biolink(t, SKOS_BROAD_MATCH, o).
mapped_to(t, o) :- local_mapping(o, t, _).

subprop(sub, super) :- biolink(sub, RDFS_SUBPROPERTY_OF, super).
subprop(sub, supersuper) :- subprop(sub, super), biolink(super, RDFS_SUBPROPERTY_OF, supersuper).

graph(g) :- quad(_, _, _, g).

primary_source(g, "infores:go-cam") :- graph(g), contains("model.geneontology.org", g).
primary_source(g, "infores:aop-cam") :- graph(g), contains("model/AOP_", g).
primary_source(g, "infores:ctd") :- graph(g), contains("ctdbase.org", g).
// signor?

direct_type(i, t) :-
    quad(i, SESAME_DIRECT_TYPE, t, _),
    t != MOLECULAR_FUNCTION,
    t != BIOLOGICAL_PROCESS,
    t != CELLULAR_COMPONENT,
    t != MOLECULAR_EVENT,
    t != HUMAN,
    t != MOUSE,
    t != RAT,
    t != ZEBRAFISH,
    !contains("http://purl.obolibrary.org/obo/BFO_", t),
    !contains("http://purl.obolibrary.org/obo/CARO_", t).

direct_type(i, uniprot) :- quad(i, SESAME_DIRECT_TYPE, reacto, _), canonical_record(reacto, uniprot).

// Add qualified_quads with qualifiers. We then concatenate all the qualifiers together using MaGiC.
.decl qualified_quad(s: symbol, p: symbol, o: symbol, g: symbol, qualifier_id: symbol, qualifier_value: symbol)

// TODO: we will need to separate keys and values for qualifiers, because we might need to find the "best" value for a particular key (e.g. most specific organ).

// biolink:anatomical_context_qualifier
#define BIOLINK_AFFECTS "<https://w3id.org/biolink/vocab/affects>"
#define BIOLINK_ACTIVE_IN "<https://w3id.org/biolink/vocab/active_in>"
#define BIOLINK_PART_OF "<https://w3id.org/biolink/vocab/part_of>"
#define ANATOMICAL_CONTEXT_QUALIFIER "<https://w3id.org/biolink/vocab/anatomical_context_qualifier>"
qualified_quad(s, BIOLINK_AFFECTS, o, g, ANATOMICAL_CONTEXT_QUALIFIER, location) :-
    biolink_quad(s, BIOLINK_AFFECTS, o, g),
    biolink_quad(s, BIOLINK_ACTIVE_IN, l, g),
    direct_type(l, location).
qualified_quad(s, BIOLINK_AFFECTS, o, g, ANATOMICAL_CONTEXT_QUALIFIER, location) :-
    biolink_quad(s, BIOLINK_AFFECTS, o, g),
    biolink_quad(o, BIOLINK_ACTIVE_IN, l, g),
    direct_type(l, location).

// TODO: biolink:location_of
// TODO sometimes proteins overlap locations, e.g.:
// UniProtKB:Q9NYG2	biolink:overlaps	GO:0005794	http://model.geneontology.org/586fc17a00000528	infores:go-cam
// UniProtKB:Q9NYG2	biolink:overlaps	CL:0000210	http://model.geneontology.org/586fc17a00000528	infores:go-cam
// UniProtKB:Q9NYG2	biolink:overlaps	UBERON:0000966	http://model.geneontology.org/586fc17a00000528	infores:go-cam
// This is probably redundant.

/*
TODO: BUT not all quads will make it into biolink_quad if there's a mapping problem. So we should stay with instances as
long as possible. So let's try to create qualified quads in the same way we create quads.

This is what that looks like in quad.facts:

<http://model.geneontology.org/586fc17a00000528/586fc17a00000530>	<http://www.w3.org/1999/02/22-rdf-syntax-ns#type>	<http://purl.obolibrary.org/obo/GO_0016409>	<http://model.geneontology.org/586fc17a00000528>
- http://purl.obolibrary.org/obo/GO_0016409: palmitoyltransferase activity
<http://model.geneontology.org/586fc17a00000528/586fc17a00000530>	<http://purl.obolibrary.org/obo/RO_0002333>	<http://model.geneontology.org/586fc17a00000528/586fc17a00000529>	<http://model.geneontology.org/586fc17a00000528>
- http://purl.obolibrary.org/obo/RO_0002233: has input
- http://model.geneontology.org/586fc17a00000528/586fc17a00000529 has direct type http://identifiers.org/uniprot/Q9NYG2
<http://model.geneontology.org/586fc17a00000528/586fc17a00000530>	<http://purl.obolibrary.org/obo/RO_0002233>	<http://model.geneontology.org/586fc17a00000528/586fc17a00000551>	<http://model.geneontology.org/586fc17a00000528>
- http://purl.obolibrary.org/obo/RO_0002233: has input
- http://model.geneontology.org/586fc17a00000528/586fc17a00000551 has direct type http://identifiers.org/uniprot/Q00LT1
<http://model.geneontology.org/586fc17a00000528/586fc17a00000530>	<http://purl.obolibrary.org/obo/RO_0002234>	<http://model.geneontology.org/586fc17a00000528/586fc17a00000541>	<http://model.geneontology.org/586fc17a00000528>
- http://purl.obolibrary.org/obo/RO_0002234: has output
- http://model.geneontology.org/586fc17a00000528/586fc17a00000541 has direct type UniProtKB:Q00LT1
<http://model.geneontology.org/586fc17a00000528/586fc17a00000530>	<http://purl.obolibrary.org/obo/BFO_0000066>	<http://model.geneontology.org/586fc17a00000528/586fc17a00000532>	<http://model.geneontology.org/586fc17a00000528>
- http://purl.obolibrary.org/obo/BFO_0000066: occurs in
<http://model.geneontology.org/586fc17a00000528/586fc17a00000532>	<http://www.w3.org/1999/02/22-rdf-syntax-ns#type>	<http://purl.obolibrary.org/obo/GO_0005794>	<http://model.geneontology.org/586fc17a00000528>
- http://purl.obolibrary.org/obo/GO_0005794: Golgi apparatus

*/

biolink_quad(s, pred, o, g) :- quad(s, p, o, g), mapped_to(pred, p), p != RDF_TYPE.
redundant_quad(s, pred, o, g) :- biolink_quad(s, pred, o, g), subprop(other, pred), biolink_quad(s, other, o, g).
nonredundant_quad(s, pred, o, g) :- biolink_quad(s, pred, o, g), !redundant_quad(s, pred, o, g).

// Unqualified kg_edge
kg_edge(subj, pred, obj, prov, ps, "", "") :-
    nonredundant_quad(s, pred, o, g),
    direct_type(s, subj),
    direct_type(o, obj),
    primary_source(g, ps),
    prov=substr(g, 1, strlen(g) - 2).

// Qualified kg_edge
kg_edge(subj, pred, obj, prov, ps, qualifier_id, qualifier_value) :-
    nonredundant_quad(s, pred, o, g),
    direct_type(s, subj),
    direct_type(o, obj),
    primary_source(g, ps),
    qualified_quad(s, pred, o, g, qualifier_id, qualifier_value),
    prov=substr(g, 1, strlen(g) - 2).
